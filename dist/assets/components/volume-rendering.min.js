!function(){const e=window[Symbol.for("X_ITE.X3D-7.0.0")],t=e.define,n=e.require;t("x_ite/Components/VolumeRendering/X3DVolumeRenderStyleNode",["x_ite/Components/Core/X3DNode","x_ite/Base/X3DConstants"],(function(e,t){"use strict";function n(n){e.call(this,n),this.addType(t.X3DVolumeRenderStyleNode),this.volumeDataNodes=new Set}return n.prototype=Object.assign(Object.create(e.prototype),{constructor:n,addShaderFields:function(e){},getUniformsText:function(){return""},getFunctionsText:function(){return""},getVolumeData:function(){return this.volumeDataNodes},addVolumeData:function(e){this.volumeDataNodes.add(e)},removeVolumeData:function(e){this.volumeDataNodes.delete(e)},getNormalText:function(e){let t="";return e?(t+="uniform sampler3D surfaceNormals_"+this.getId()+";\n",t+="\n",t+="vec4\n",t+="getNormal_"+this.getId()+" (in vec3 texCoord)\n",t+="{\n",t+="   vec3 n = texture (surfaceNormals_"+this.getId()+", texCoord) .xyz * 2.0 - 1.0;\n",t+="\n",t+="   return vec4 (normalize (x3d_TextureNormalMatrix * n), length (n));\n",t+="}\n"):(t+="\n",t+="vec4\n",t+="getNormal_"+this.getId()+" (in vec3 texCoord)\n",t+="{\n",t+="   vec4  offset = vec4 (1.0 / vec3 (textureSize (x3d_Texture3D [0], 0)), 0.0);\n",t+="   float i0     = texture (x3d_Texture3D [0], texCoord + offset .xww) .r;\n",t+="   float i1     = texture (x3d_Texture3D [0], texCoord - offset .xww) .r;\n",t+="   float i2     = texture (x3d_Texture3D [0], texCoord + offset .wyw) .r;\n",t+="   float i3     = texture (x3d_Texture3D [0], texCoord - offset .wyw) .r;\n",t+="   float i4     = texture (x3d_Texture3D [0], texCoord + offset .wwz) .r;\n",t+="   float i5     = texture (x3d_Texture3D [0], texCoord - offset .wwz) .r;\n",t+="   vec3  n      = vec3 (i1 - i0, i3 - i2, i5 - i4);\n",t+="\n",t+="   return vec4 (normalize (x3d_TextureNormalMatrix * n), length (n));\n",t+="}\n"),t}}),n})),t("x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode",["x_ite/Components/VolumeRendering/X3DVolumeRenderStyleNode","x_ite/Base/X3DConstants"],(function(e,t){"use strict";function n(n){e.call(this,n),this.addType(t.X3DComposableVolumeRenderStyleNode)}return n.prototype=Object.assign(Object.create(e.prototype),{constructor:n}),n})),t("x_ite/Components/VolumeRendering/OpacityMapVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r){"use strict";function s(e){o.call(this,e),this.addType(i.OpacityMapVolumeStyle)}return s.prototype=Object.assign(Object.create(o.prototype),{constructor:s,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"transferFunction",new e.SFNode)]),getTypeName:function(){return"OpacityMapVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._transferFunction.addInterest("set_transferFunction__",this),this.set_transferFunction__())},set_transferFunction__:function(){this.transferFunctionNode=r(i.X3DTexture2DNode,this._transferFunction),this.transferFunctionNode||(this.transferFunctionNode=r(i.X3DTexture3DNode,this._transferFunction)),this.transferFunctionNode||(this.transferFunctionNode=this.getBrowser().getDefaultTransferFunction())},addShaderFields:function(t){this._enabled.getValue()&&t.addUserDefinedField(i.inputOutput,"transferFunction_"+this.getId(),new e.SFNode(this.transferFunctionNode))},getUniformsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="// OpacityMapVolumeStyle\n",e+="\n",this.transferFunctionNode.getType().includes(i.X3DTexture2DNode)?(e+="uniform sampler2D transferFunction_"+this.getId()+";\n",e+="\n",e+="vec4\n",e+="getOpacityMapStyle_"+this.getId()+" (in vec4 originalColor)\n",e+="{\n",e+="   return texture (transferFunction_"+this.getId()+", originalColor .rg);\n",e+="}\n"):(e+="uniform sampler3D transferFunction_"+this.getId()+";\n",e+="\n",e+="vec4\n",e+="getOpacityMapStyle_"+this.getId()+" (in vec4 originalColor)\n",e+="{\n",e+="   return texture (transferFunction_"+this.getId()+", originalColor .rgb);\n",e+="}\n"),e},getFunctionsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="   // OpacityMapVolumeStyle\n",e+="\n",e+="   textureColor = getOpacityMapStyle_"+this.getId()+" (textureColor);\n",e}}),s})),t("x_ite/Browser/VolumeRendering/X3DVolumeRenderingContext",["x_ite/Components/Texturing/PixelTexture","x_ite/Components/Texturing/TextureProperties","x_ite/Components/VolumeRendering/OpacityMapVolumeStyle"],(function(e,t,n){"use strict";const o=Symbol(),i=Symbol(),r=Symbol(),s=Symbol();function a(){}return a.prototype={getDefaultVoxels:function(e){return this[o]=e.createNode("PixelTexture3D",!1),this[o]._image=[1,1,1,1,255],this[o].repeatS=!0,this[o].repeatT=!0,this[o].repeatR=!0,this[o].setPrivate(!0),this[o].setup(),this.getDefaultVoxels=function(){return this[o]},Object.defineProperty(this,"getDefaultVoxels",{enumerable:!1}),this[o]},getDefaultVolumeStyle:function(){return this[i]=new n(this.getPrivateScene()),this[i].setPrivate(!0),this[i].setup(),this.getDefaultVolumeStyle=function(){return this[i]},Object.defineProperty(this,"getDefaultVolumeStyle",{enumerable:!1}),this[i]},getDefaultBlendedVolumeStyle:function(){return this[r]=new n(this.getPrivateScene()),this[r].setPrivate(!0),this[r].setup(),this.getDefaultBlendedVolumeStyle=function(){return this[r]},Object.defineProperty(this,"getDefaultBlendedVolumeStyle",{enumerable:!1}),this[r]},getDefaultTransferFunction:function(){const n=new t(this.getPrivateScene());return n._generateMipMaps=!0,n._boundaryModeS="CLAMP_TO_EDGE",n._boundaryModeT="REPEAT",n.setPrivate(!0),n.setup(),this[s]=new e(this.getPrivateScene()),this[s]._textureProperties=n,this[s]._image.width=256,this[s]._image.height=1,this[s]._image.comp=2,this[s]._image.array=Array.from({length:256},((e,t)=>t<<8|t)),this[s].setPrivate(!0),this[s].setup(),this.getDefaultTransferFunction=function(){return this[s]},Object.defineProperty(this,"getDefaultTransferFunction",{enumerable:!1}),this[s]}},a})),t("x_ite/Components/VolumeRendering/BlendedVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Base/X3DConstants","x_ite/Base/X3DCast","x_ite/DEBUG"],(function(e,t,n,o,i,r,s){"use strict";function a(e){o.call(this,e),this.addType(i.BlendedVolumeStyle)}return a.prototype=Object.assign(Object.create(o.prototype),{constructor:a,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"weightConstant1",new e.SFFloat(.5)),new t(i.inputOutput,"weightConstant2",new e.SFFloat(.5)),new t(i.inputOutput,"weightFunction1",new e.SFString("CONSTANT")),new t(i.inputOutput,"weightFunction2",new e.SFString("CONSTANT")),new t(i.inputOutput,"weightTransferFunction1",new e.SFNode),new t(i.inputOutput,"weightTransferFunction2",new e.SFNode),new t(i.inputOutput,"renderStyle",new e.SFNode),new t(i.inputOutput,"voxels",new e.SFNode)]),getTypeName:function(){return"BlendedVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._weightTransferFunction1.addInterest("set_weightTransferFunction1__",this),this._weightTransferFunction2.addInterest("set_weightTransferFunction2__",this),this._renderStyle.addInterest("set_renderStyle__",this),this._voxels.addInterest("set_voxels__",this),this.set_weightTransferFunction1__(),this.set_weightTransferFunction2__(),this.set_renderStyle__(),this.set_voxels__())},addVolumeData:function(e){o.prototype.addVolumeData.call(this,e),this.renderStyleNode&&this.renderStyleNode.addVolumeData(e)},removeVolumeData:function(e){o.prototype.removeVolumeData.call(this,e),this.renderStyleNode&&this.renderStyleNode.removeVolumeData(e)},set_weightTransferFunction1__:function(){this.weightTransferFunction1Node=r(i.X3DTexture2DNode,this._weightTransferFunction1)},set_weightTransferFunction2__:function(){this.weightTransferFunction2Node=r(i.X3DTexture2DNode,this._weightTransferFunction2)},set_renderStyle__:function(){if(this.renderStyleNode){this.renderStyleNode.removeInterest("addNodeEvent",this);for(const e of this.getVolumeData())this.renderStyleNode.removeVolumeData(e)}if(this.renderStyleNode=r(i.X3DComposableVolumeRenderStyleNode,this._renderStyle),this.renderStyleNode){this.renderStyleNode.addInterest("addNodeEvent",this);for(const e of this.getVolumeData())this.renderStyleNode.addVolumeData(e)}},set_voxels__:function(){this.voxelsNode=r(i.X3DTexture3DNode,this._voxels)},addShaderFields:function(t){this._enabled.getValue()&&(t.addUserDefinedField(i.inputOutput,"weightConstant1_"+this.getId(),this._weightConstant1.copy()),t.addUserDefinedField(i.inputOutput,"weightConstant2_"+this.getId(),this._weightConstant2.copy()),this.weightTransferFunction1Node&&t.addUserDefinedField(i.inputOutput,"weightTransferFunction1_"+this.getId(),new e.SFNode(this.weightTransferFunction1Node)),this.weightTransferFunction2Node&&t.addUserDefinedField(i.inputOutput,"weightTransferFunction2_"+this.getId(),new e.SFNode(this.weightTransferFunction2Node)),this.voxelsNode&&t.addUserDefinedField(i.inputOutput,"voxels_"+this.getId(),new e.SFNode(this.voxelsNode)),this.getBrowser().getDefaultBlendedVolumeStyle().addShaderFields(t),this.renderStyleNode&&this.renderStyleNode.addShaderFields(t))},getUniformsText:function(){if(!this._enabled.getValue())return"";if(!this.voxelsNode)return"";let e="";e+="\n",e+="// BlendedVolumeStyle\n",e+="\n",e+="uniform float     weightConstant1_"+this.getId()+";\n",e+="uniform float     weightConstant2_"+this.getId()+";\n",this.weightTransferFunction1Node&&(e+="uniform sampler2D weightTransferFunction1_"+this.getId()+";\n"),this.weightTransferFunction2Node&&(e+="uniform sampler2D weightTransferFunction2_"+this.getId()+";\n"),e+="uniform sampler3D voxels_"+this.getId()+";\n";let t=this.getBrowser().getDefaultBlendedVolumeStyle().getUniformsText();this.renderStyleNode&&(t+=this.renderStyleNode.getUniformsText()),t=t.replace(/x3d_Texture3D\s*\[0\]/g,"voxels_"+this.getId()),e+="\n",e+=t,e+="\n",e+="vec4\n",e+="getBlendedStyle_"+this.getId()+" (in vec4 originalColor, in vec3 texCoord)\n",e+="{\n",e+="   vec4 blendColor_"+this.getId()+" = texture (voxels_"+this.getId()+", texCoord);";let n=this.getBrowser().getDefaultBlendedVolumeStyle().getFunctionsText();switch(this.renderStyleNode&&(n+=this.renderStyleNode.getFunctionsText()),n=n.replace(/textureColor/g,"blendColor_"+this.getId()),e+="\n",e+=n,this._weightFunction1.getValue()){default:e+="   float w1_"+this.getId()+" = weightConstant1_"+this.getId()+";\n";break;case"ALPHA0":e+="   float w1_"+this.getId()+" = originalColor .a;\n";break;case"ALPHA1":e+="   float w1_"+this.getId()+" = blendColor_ "+this.getId()+" .a;\n";break;case"ONE_MINUS_ALPHA0":e+="   float w1_"+this.getId()+" = 1.0 - originalColor .a;\n";break;case"ONE_MINUS_ALPHA1":e+="   float w1_"+this.getId()+" = 1.0 - blendColor_ "+this.getId()+" .a;\n";break;case"TABLE":this.weightTransferFunction1Node?e+="   float w1_"+this.getId()+" = texture (weightTransferFunction1_"+this.getId()+", vec2 (originalColor .a, blendColor_"+this.getId()+" .a)) .r;\n":e+="   float w1_"+this.getId()+" = weightConstant1_"+this.getId()+";\n"}switch(this._weightFunction2.getValue()){default:e+="   float w2_"+this.getId()+" = weightConstant2_"+this.getId()+";\n";break;case"ALPHA0":e+="   float w2_"+this.getId()+" = originalColor .a;\n";break;case"ALPHA1":e+="   float w2_"+this.getId()+" = blendColor_ "+this.getId()+" .a;\n";break;case"ONE_MINUS_ALPHA0":e+="   float w2_"+this.getId()+" = 1.0 - originalColor .a;\n";break;case"ONE_MINUS_ALPHA1":e+="   float w2_"+this.getId()+" = 1.0 - blendColor_ "+this.getId()+" .a;\n";break;case"TABLE":this.weightTransferFunction2Node?e+="   float w2_"+this.getId()+" = texture (weightTransferFunction2_"+this.getId()+", vec2 (originalColor .a, blendColor_"+this.getId()+" .a)) .r;\n":e+="   float w2_"+this.getId()+" = weightConstant2_"+this.getId()+";\n"}return e+="\n",e+="   return clamp (originalColor * w1_"+this.getId()+" + blendColor_"+this.getId()+" * w2_"+this.getId()+", 0.0, 1.0);\n",e+="}\n",e},getFunctionsText:function(){if(!this._enabled.getValue())return"";if(!this.voxelsNode)return"";let e="";return e+="\n",e+="   // BlendedVolumeStyle\n",e+="\n",e+="   textureColor = getBlendedStyle_"+this.getId()+" (textureColor, texCoord);\n",e}}),a})),t("x_ite/Components/VolumeRendering/BoundaryEnhancementVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Base/X3DConstants"],(function(e,t,n,o,i){"use strict";function r(e){o.call(this,e),this.addType(i.BoundaryEnhancementVolumeStyle)}return r.prototype=Object.assign(Object.create(o.prototype),{constructor:r,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"retainedOpacity",new e.SFFloat(.2)),new t(i.inputOutput,"boundaryOpacity",new e.SFFloat(.9)),new t(i.inputOutput,"opacityFactor",new e.SFFloat(2))]),getTypeName:function(){return"BoundaryEnhancementVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},addShaderFields:function(e){this._enabled.getValue()&&(e.addUserDefinedField(i.inputOutput,"retainedOpacity_"+this.getId(),this._retainedOpacity.copy()),e.addUserDefinedField(i.inputOutput,"boundaryOpacity_"+this.getId(),this._boundaryOpacity.copy()),e.addUserDefinedField(i.inputOutput,"opacityFactor_"+this.getId(),this._opacityFactor.copy()))},getUniformsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="// BoundaryEnhancementVolumeStyle\n",e+="\n",e+="uniform float retainedOpacity_"+this.getId()+";\n",e+="uniform float boundaryOpacity_"+this.getId()+";\n",e+="uniform float opacityFactor_"+this.getId()+";\n",e+="\n",e+="vec4\n",e+="getBoundaryEnhancementStyle_"+this.getId()+" (in vec4 originalColor, in vec3 texCoord)\n",e+="{\n",e+="   float f0 = texture (x3d_Texture3D [0], texCoord) .r;\n",e+="   float f1 = texture (x3d_Texture3D [0], texCoord + vec3 (0.0, 0.0, 1.0 / float (textureSize (x3d_Texture3D [0], 0) .z))) .r;\n",e+="   float f  = abs (f0 - f1);\n",e+="\n",e+="   float retainedOpacity = retainedOpacity_"+this.getId()+";\n",e+="   float boundaryOpacity = boundaryOpacity_"+this.getId()+";\n",e+="   float opacityFactor   = opacityFactor_"+this.getId()+";\n",e+="\n",e+="   return vec4 (originalColor .rgb, originalColor .a * (retainedOpacity + boundaryOpacity * pow (f, opacityFactor)));\n",e+="}\n",e},getFunctionsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="   // BoundaryEnhancementVolumeStyle\n",e+="\n",e+="   textureColor = getBoundaryEnhancementStyle_"+this.getId()+" (textureColor, texCoord);\n",e}}),r})),t("x_ite/Components/VolumeRendering/CartoonVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r){"use strict";function s(e){o.call(this,e),this.addType(i.CartoonVolumeStyle)}return s.prototype=Object.assign(Object.create(o.prototype),{constructor:s,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"colorSteps",new e.SFInt32(4)),new t(i.inputOutput,"orthogonalColor",new e.SFColorRGBA(1,1,1,1)),new t(i.inputOutput,"parallelColor",new e.SFColorRGBA(0,0,0,1)),new t(i.inputOutput,"surfaceNormals",new e.SFNode)]),getTypeName:function(){return"CartoonVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._surfaceNormals.addInterest("set_surfaceNormals__",this),this.set_surfaceNormals__())},set_surfaceNormals__:function(){this.surfaceNormalsNode=r(i.X3DTexture3DNode,this._surfaceNormals)},addShaderFields:function(t){this._enabled.getValue()&&(t.addUserDefinedField(i.inputOutput,"colorSteps_"+this.getId(),this._colorSteps.copy()),t.addUserDefinedField(i.inputOutput,"orthogonalColor_"+this.getId(),this._orthogonalColor.copy()),t.addUserDefinedField(i.inputOutput,"parallelColor_"+this.getId(),this._parallelColor.copy()),this.surfaceNormalsNode&&t.addUserDefinedField(i.inputOutput,"surfaceNormals_"+this.getId(),new e.SFNode(this.surfaceNormalsNode)))},getUniformsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="// CartoonVolumeStyle\n",e+="\n",e+="uniform int  colorSteps_"+this.getId()+";\n",e+="uniform vec4 orthogonalColor_"+this.getId()+";\n",e+="uniform vec4 parallelColor_"+this.getId()+";\n",e+=this.getNormalText(this.surfaceNormalsNode),e+="\n",e+="vec3\n",e+="rgb2hsv_"+this.getId()+" (in vec3 color)\n",e+="{\n",e+="   float h = 0.0;\n",e+="   float s = 0.0;\n",e+="   float v = 0.0;\n",e+="\n",e+="   float min = min (min (color .r, color .g), color .b);\n",e+="   float max = max (max (color .r, color .g), color .b);\n",e+="   v = max; // value\n",e+="\n",e+="   float delta = max - min;\n",e+="\n",e+="   if (max != 0.0 && delta != 0.0)\n",e+="   {\n",e+="      s = delta / max; // s\n",e+="\n",e+="      if (color .r == max)\n",e+="         h =     (color .g - color .b) / delta;  // between yellow & magenta\n",e+="      else if (color .g == max)\n",e+="         h = 2.0 + (color .b - color .r) / delta;  // between cyan & yellow\n",e+="      else\n",e+="         h = 4.0 + (color .r - color .g) / delta;  // between magenta & cyan\n",e+="\n",e+="      h *= M_PI / 3.0;  // radiants\n",e+="      if (h < 0.0)\n",e+="         h += M_PI * 2.0;\n",e+="   }\n",e+="   else\n",e+="      s = h = 0.0;         // s = 0, h is undefined\n",e+="\n",e+="   return vec3 (h, s, v);\n",e+="}\n",e+="\n",e+="vec3\n",e+="hsv2rgb_"+this.getId()+" (in vec3 hsv)\n",e+="{\n",e+="   float h = hsv [0];\n",e+="   float s = clamp (hsv [1], 0.0, 1.0);\n",e+="   float v = clamp (hsv [2], 0.0, 1.0);\n",e+="\n",e+="   // H is given on [0, 2 * Pi]. S and V are given on [0, 1].\n",e+="   // RGB are each returned on [0, 1].\n",e+="\n",e+="   if (s == 0.0)\n",e+="   {\n",e+="      // achromatic (grey)\n",e+="      return vec3 (v, v, v);\n",e+="   }\n",e+="   else\n",e+="   {\n",e+="      float w = (h * (180.0 / M_PI)) / 60.0;     // sector 0 to 5\n",e+="\n",e+="      float i = floor (w);\n",e+="      float f = w - i;                      // factorial part of h\n",e+="      float p = v * ( 1.0 - s );\n",e+="      float q = v * ( 1.0 - s * f );\n",e+="      float t = v * ( 1.0 - s * ( 1.0 - f ) );\n",e+="\n",e+="      switch (int (i) % 6)\n",e+="      {\n",e+="         case 0:  return vec3 (v, t, p);\n",e+="         case 1:  return vec3 (q, v, p);\n",e+="         case 2:  return vec3 (p, v, t);\n",e+="         case 3:  return vec3 (p, q, v);\n",e+="         case 4:  return vec3 (t, p, v);\n",e+="         default: return vec3 (v, p, q);\n",e+="      }\n",e+="   }\n",e+="\n",e+="   return vec3 (0.0);\n",e+="}\n",e+="\n",e+="vec3\n",e+="mix_hsv_"+this.getId()+" (in vec3 a, in vec3 b, in float t)\n",e+="{\n",e+="   // Linearely interpolate in HSV space between source color @a a and destination color @a b by an amount of @a t.\n",e+="   // Source and destination color must be in HSV space.\n",e+="\n",e+="   float ha = a [0];\n",e+="   float sa = a [1];\n",e+="   float va = a [2];\n",e+="\n",e+="   float hb = b [0];\n",e+="   float sb = b [1];\n",e+="   float vb = b [2];\n",e+="\n",e+="   if (sa == 0.0)\n",e+="      ha = hb;\n",e+="\n",e+="   if (sb == 0.0)\n",e+="      hb = ha;\n",e+="\n",e+="   float range = abs (hb - ha);\n",e+="\n",e+="   if (range <= M_PI)\n",e+="   {\n",e+="      float h = ha + t * (hb - ha);\n",e+="      float s = sa + t * (sb - sa);\n",e+="      float v = va + t * (vb - va);\n",e+="      return vec3 (h, s, v);\n",e+="   }\n",e+="\n",e+="   float PI2  = M_PI * 2.0;\n",e+="   float step = (PI2 - range) * t;\n",e+="   float h    = ha < hb ? ha - step : ha + step;\n",e+="\n",e+="   if (h < 0.0)\n",e+="      h += PI2;\n",e+="\n",e+="   else if (h > PI2)\n",e+="      h -= PI2;\n",e+="\n",e+="   float s = sa + t * (sb - sa);\n",e+="   float v = va + t * (vb - va);\n",e+="   return vec3 (h, s, v);\n",e+="}\n",e+="\n",e+="vec4\n",e+="getCartoonStyle_"+this.getId()+" (in vec4 originalColor, vec3 texCoord)\n",e+="{\n",e+="   vec4 surfaceNormal = getNormal_"+this.getId()+" (texCoord);\n",e+="\n",e+="   if (surfaceNormal .w == 0.0)\n",e+="      return vec4 (0.0);\n",e+="\n",e+="   vec4 orthogonalColor = orthogonalColor_"+this.getId()+";\n",e+="   vec4 parallelColor   = parallelColor_"+this.getId()+";\n",e+="   int  colorSteps      = colorSteps_"+this.getId()+";\n",e+="\n",e+="   float steps    = clamp (float (colorSteps), 1.0, 64.0);\n",e+="   float step     = M_PI / 2.0 / steps;\n",e+="   float cosTheta = min (dot (surfaceNormal .xyz, normalize (vertex)), 1.0);\n",e+="\n",e+="   if (cosTheta < 0.0)\n",e+="      return vec4 (0.0);\n",e+="\n",e+="   float t             = cos (min (floor (acos (cosTheta) / step) * (steps > 1.0 ? steps / (steps - 1.0) : 1.0), steps) * step);\n",e+="   vec3  orthogonalHSV = rgb2hsv_"+this.getId()+" (orthogonalColor .rgb);\n",e+="   vec3  parallelHSV   = rgb2hsv_"+this.getId()+" (parallelColor .rgb);\n",e+="\n",e+="   return vec4 (hsv2rgb_"+this.getId()+" (mix_hsv_"+this.getId()+" (orthogonalHSV, parallelHSV, t)), originalColor .a);\n",e+="}\n",e},getFunctionsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="   // CartoonVolumeStyle\n",e+="\n",e+="   textureColor = getCartoonStyle_"+this.getId()+" (textureColor, texCoord);\n",e}}),s})),t("x_ite/Components/VolumeRendering/ComposedVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r){"use strict";function s(e){o.call(this,e),this.addType(i.ComposedVolumeStyle),this.renderStyleNodes=[]}return s.prototype=Object.assign(Object.create(o.prototype),{constructor:s,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"renderStyle",new e.MFNode)]),getTypeName:function(){return"ComposedVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._renderStyle.addInterest("set_renderStyle__",this),this.set_renderStyle__())},addVolumeData:function(e){o.prototype.addVolumeData.call(this,e);for(const t of this.renderStyleNodes)t.addVolumeData(e)},removeVolumeData:function(e){o.prototype.removeVolumeData.call(this,e);for(const t of this.renderStyleNodes)t.removeVolumeData(e)},set_renderStyle__:function(){const e=this.renderStyleNodes;for(const t of e){t.removeInterest("addNodeEvent",this);for(const e of this.getVolumeData())t.removeVolumeData(e)}e.length=0;for(const t of this._renderStyle){const n=r(i.X3DComposableVolumeRenderStyleNode,t);n&&e.push(n)}for(const t of e){t.addInterest("addNodeEvent",this);for(const e of this.getVolumeData())t.addVolumeData(e)}},addShaderFields:function(e){if(this._enabled.getValue())for(const t of this.renderStyleNodes)t.addShaderFields(e)},getUniformsText:function(){if(!this._enabled.getValue())return"";let e="";for(const t of this.renderStyleNodes)e+=t.getUniformsText();e+="\n",e+="vec4\n",e+="getComposedStyle_"+this.getId()+" (in vec4 textureColor, in vec3 texCoord)\n",e+="{\n";for(const t of this.renderStyleNodes)e+=t.getFunctionsText();return e+="\n",e+="   return textureColor;\n",e+="}\n",e},getFunctionsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="   // ComposedVolumeStyle\n",e+="\n",e+="   textureColor = getComposedStyle_"+this.getId()+" (textureColor, texCoord);\n",e}}),s})),t("x_ite/Components/VolumeRendering/EdgeEnhancementVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r){"use strict";function s(e){o.call(this,e),this.addType(i.EdgeEnhancementVolumeStyle)}return s.prototype=Object.assign(Object.create(o.prototype),{constructor:s,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"edgeColor",new e.SFColorRGBA(0,0,0,1)),new t(i.inputOutput,"gradientThreshold",new e.SFFloat(.4)),new t(i.inputOutput,"surfaceNormals",new e.SFNode)]),getTypeName:function(){return"EdgeEnhancementVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._surfaceNormals.addInterest("set_surfaceNormals__",this),this.set_surfaceNormals__())},set_surfaceNormals__:function(){this.surfaceNormalsNode=r(i.X3DTexture3DNode,this._surfaceNormals)},addShaderFields:function(t){this._enabled.getValue()&&(t.addUserDefinedField(i.inputOutput,"edgeColor_"+this.getId(),this._edgeColor.copy()),t.addUserDefinedField(i.inputOutput,"gradientThreshold_"+this.getId(),this._gradientThreshold.copy()),this.surfaceNormalsNode&&t.addUserDefinedField(i.inputOutput,"surfaceNormals_"+this.getId(),new e.SFNode(this.surfaceNormalsNode)))},getUniformsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="// EdgeEnhancementVolumeStyle\n",e+="\n",e+="uniform vec4  edgeColor_"+this.getId()+";\n",e+="uniform float gradientThreshold_"+this.getId()+";\n",e+=this.getNormalText(this.surfaceNormalsNode),e+="\n",e+="vec4\n",e+="getEdgeEnhacementStyle_"+this.getId()+" (in vec4 originalColor, in vec3 texCoord)\n",e+="{\n",e+="   vec4 surfaceNormal = getNormal_"+this.getId()+" (texCoord);\n",e+="\n",e+="   if (surfaceNormal .w == 0.0)\n",e+="      return vec4 (0.0);\n",e+="\n",e+="   vec4  edgeColor         = edgeColor_"+this.getId()+";\n",e+="   float gradientThreshold = gradientThreshold_"+this.getId()+";\n",e+="\n",e+="   float angle = abs (dot (surfaceNormal .xyz, normalize (vertex)));\n",e+="\n",e+="   if (angle >= cos (gradientThreshold))\n",e+="      return originalColor;\n",e+="   else\n",e+="      return vec4 (mix (edgeColor .rgb, originalColor.rgb, angle), originalColor .a);\n",e+="}\n",e},getFunctionsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="   // EdgeEnhancementVolumeStyle\n",e+="\n",e+="   textureColor = getEdgeEnhacementStyle_"+this.getId()+" (textureColor, texCoord);\n",e}}),s})),t("text!x_ite/Browser/VolumeRendering/VolumeStyle.vs",[],(function(){return"#version 300 es\n\nprecision highp float;\nprecision highp int;\n\nuniform mat4 x3d_ProjectionMatrix;\nuniform mat4 x3d_ModelViewMatrix;\nuniform mat4 x3d_TextureMatrix [1];\n\nin vec4  x3d_TexCoord0;\nin vec4  x3d_Vertex;\n\nout vec3 vertex;\nout vec4 texCoord;\n\nvoid\nmain ()\n{\n   vec4 position = x3d_ModelViewMatrix * x3d_Vertex;\n\n   vertex   = position .xyz;\n   texCoord = x3d_TextureMatrix [0] * x3d_TexCoord0;\n\n   gl_Position = x3d_ProjectionMatrix * position;\n}\n"})),t("text!x_ite/Browser/VolumeRendering/VolumeStyle.fs",[],(function(){return'#version 300 es\n\nprecision highp float;\nprecision highp int;\nprecision highp sampler3D;\n\nin vec3 vertex;\nin vec4 texCoord;\n\nuniform sampler3D x3d_Texture3D [1];\nuniform mat3 x3d_TextureNormalMatrix;\n\nuniform x3d_LightSourceParameters x3d_LightSource [x3d_MaxLights];\n\nconst float M_PI = 3.14159265359;\n\n#pragma X3D include "includes/ClipPlanes.glsl"\n#pragma X3D include "includes/Fog.glsl"\n\n// VOLUME_STYLES_UNIFORMS\n\nout vec4 x3d_FragColor;\n\nvec4\ngetTextureColor (in vec3 texCoord)\n{\n   if (texCoord .s < 0.0 || texCoord .s > 1.0)\n      discard;\n\n   if (texCoord .t < 0.0 || texCoord .t > 1.0)\n      discard;\n\n   if (texCoord .p < 0.0 || texCoord .p > 1.0)\n      discard;\n\n   vec4 textureColor = texture (x3d_Texture3D [0], texCoord);\n\n   // Apply volume styles.\n\n// VOLUME_STYLES_FUNCTIONS\n\n   return textureColor;\n}\n\nvoid\nmain ()\n{\n   #if defined (X3D_CLIP_PLANES)\n      clip ();\n   #endif\n\n   vec4 finalColor = getTextureColor (texCoord .stp / texCoord .q);\n\n   #if defined (X3D_FOG)\n      finalColor .rgb = getFogColor (finalColor .rgb);\n   #endif\n\n   x3d_FragColor = finalColor;\n}\n'})),t("x_ite/Browser/VolumeRendering/VolumeMaterial",["x_ite/Components/Shape/UnlitMaterial","text!x_ite/Browser/VolumeRendering/VolumeStyle.vs","text!x_ite/Browser/VolumeRendering/VolumeStyle.fs"],(function(e,t,n){"use strict";function o(t,n){e.call(this,t),this.volumeDataNode=n,this.volumeShaderNodes=new Map}return o.prototype=Object.assign(Object.create(e.prototype),{constructor:o,getTypeName:function(){return"VolumeMaterial"},getComponentName:function(){return"Shape"},getContainerField:function(){return"material"},getVolumeShaders:function(){return this.volumeShaderNodes},getShader:function(e,t){const{fogNode:n,objectsCount:o}=t;let i="";return i+=n?n.getFogKey():"0",i+=".",i+=o[0],i+=".",i+=o[1],this.volumeShaderNodes.get(i)||this.createShader(i,e,t)},createShader:function(e,o,i){const r=this.getBrowser(),s=[],{fogNode:a,objectsCount:l}=i;a&&s.push("X3D_FOG"),l[0]&&(s.push("X3D_CLIP_PLANES"),s.push("X3D_NUM_CLIP_PLANES "+Math.min(l[0],r.getMaxClipPlanes()))),l[1]&&(s.push("X3D_LIGHTING"),s.push("X3D_NUM_LIGHTS "+Math.min(l[1],r.getMaxLights())));const d=this.volumeDataNode.createShader(s,t,n);return this.volumeShaderNodes.set(e,d),d},setShaderUniforms:function(e,t,n,o,i){this.volumeDataNode.setShaderUniforms(e,t)}}),o})),t("x_ite/Components/VolumeRendering/X3DVolumeDataNode",["x_ite/Fields","x_ite/Components/Core/X3DChildNode","x_ite/Components/Grouping/X3DBoundedObject","x_ite/Base/X3DConstants","x_ite/Browser/Core/TextureQuality","x_ite/Browser/VolumeRendering/VolumeMaterial","standard/Math/Numbers/Vector3"],(function(e,t,n,o,i,r,s){"use strict";function a(e){t.call(this,e),n.call(this,e),this.addType(o.X3DVolumeDataNode),this.proximitySensorNode=e.createNode("ProximitySensor",!1),this.transformNode=e.createNode("Transform",!1),this.shapeNode=e.createNode("Shape",!1),this.appearanceNode=e.createNode("Appearance",!1),this.textureTransformNode=e.createNode("TextureTransform3D",!1),this.geometryNode=e.createNode("QuadSet",!1),this.textureCoordinateNode=e.createNode("TextureCoordinate3D",!1),this.coordinateNode=e.createNode("Coordinate",!1),this.volumeMaterialNode=new r(e,this),this.textureNormalMatrixArray=new Float32Array(9),this.setCameraObject(!0)}return a.prototype=Object.assign(Object.create(t.prototype),n.prototype,{constructor:a,initialize:function(){t.prototype.initialize.call(this),n.prototype.initialize.call(this);const o=this.getBrowser(),i=o.getContext();o.getBrowserOptions()._TextureQuality.addInterest("set_dimensions__",this),i.getVersion()>=2&&(this._dimensions.addInterest("set_dimensions__",this),this.set_dimensions__()),this._visible.addFieldInterest(this.transformNode._visible),this._bboxDisplay.addFieldInterest(this.transformNode._bboxDisplay),this.proximitySensorNode._size=new e.SFVec3f(-1,-1,-1),this.transformNode._children=new e.MFNode(this.shapeNode),this.shapeNode._appearance=this.appearanceNode,this.shapeNode._geometry=this.geometryNode,this.appearanceNode._alphaMode="BLEND",this.appearanceNode._material=this.volumeMaterialNode,this.appearanceNode._textureTransform=this.textureTransformNode,this.textureTransformNode._translation=new e.SFVec3f(.5,.5,.5),this.textureTransformNode._center=new e.SFVec3f(-.5,-.5,-.5),this.geometryNode._texCoord=this.textureCoordinateNode,this.geometryNode._coord=this.coordinateNode,this.coordinateNode.setPrivate(!0),this.textureCoordinateNode.setPrivate(!0),this.geometryNode.setPrivate(!0),this.textureTransformNode.setPrivate(!0),this.volumeMaterialNode.setPrivate(!0),this.appearanceNode.setPrivate(!0),this.shapeNode.setPrivate(!0),this.transformNode.setPrivate(!0),this.proximitySensorNode.setPrivate(!0),this.coordinateNode.setup(),this.textureCoordinateNode.setup(),this.geometryNode.setup(),this.textureTransformNode.setup(),this.volumeMaterialNode.setup(),this.appearanceNode.setup(),this.shapeNode.setup(),this.transformNode.setup(),this.proximitySensorNode.setup(),this.proximitySensorNode._orientation_changed.addFieldInterest(this.transformNode._rotation),this.proximitySensorNode._orientation_changed.addFieldInterest(this.textureTransformNode._rotation),this.textureTransformNode.addInterest("set_textureTransform__",this),this.set_textureTransform__()},getBBox:function(e,t){return this._bboxSize.getValue().equals(this.getDefaultBBoxSize())?e.set(this._dimensions.getValue(),s.Zero):e.set(this._bboxSize.getValue(),this._bboxCenter.getValue())},getAppearance:function(){return this.appearanceNode},updateShader:function(){this.volumeMaterialNode.getVolumeShaders().clear()},addShaderUniformNames:function(e){e.push("x3d_TextureNormalMatrix")},getNumPlanes:function(){switch(this.getBrowser().getBrowserOptions().getTextureQuality()){case i.LOW:return 200;case i.MEDIUM:return 400;case i.HIGH:return 600}return 200},set_dimensions__:function(){const t=this.getNumPlanes(),n=this._dimensions.getValue().magnitude(),o=n/2,i=[];this.coordinateNode._point.length=0;for(let e=0;e<t;++e){const r=e/(t-1)-.5;i.push(o,o,n*r,-o,o,n*r,-o,-o,n*r,o,-o,n*r)}this.coordinateNode._point=i,this.textureCoordinateNode._point=i,this.textureTransformNode._scale=new e.SFVec3f(1/this._dimensions.x,1/this._dimensions.y,1/this._dimensions.z)},set_textureTransform__:function(){this.textureNormalMatrixArray.set(this.textureTransformNode.getMatrix().submatrix.inverse())},traverse:function(e,t){this.proximitySensorNode.traverse(e,t),this.transformNode.traverse(e,t)},setShaderUniforms(e,t){e.uniformMatrix3fv(t.x3d_TextureNormalMatrix,!0,this.textureNormalMatrixArray)}}),a})),t("x_ite/Components/VolumeRendering/IsoSurfaceVolumeData",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DVolumeDataNode","x_ite/Components/Shaders/ComposedShader","x_ite/Components/Shaders/ShaderPart","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r,s,a){"use strict";function l(e){o.call(this,e),this.addType(s.IsoSurfaceVolumeData),this.renderStyleNodes=[]}return l.prototype=Object.assign(Object.create(o.prototype),{constructor:l,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(s.inputOutput,"metadata",new e.SFNode),new t(s.inputOutput,"dimensions",new e.SFVec3f(1,1,1)),new t(s.inputOutput,"contourStepSize",new e.SFFloat(0)),new t(s.inputOutput,"surfaceValues",new e.MFFloat),new t(s.inputOutput,"surfaceTolerance",new e.SFFloat(0)),new t(s.inputOutput,"visible",new e.SFBool(!0)),new t(s.inputOutput,"bboxDisplay",new e.SFBool),new t(s.initializeOnly,"bboxCenter",new e.SFVec3f(0,0,0)),new t(s.initializeOnly,"bboxSize",new e.SFVec3f(-1,-1,-1)),new t(s.inputOutput,"renderStyle",new e.MFNode),new t(s.inputOutput,"gradients",new e.SFNode),new t(s.inputOutput,"voxels",new e.SFNode)]),getTypeName:function(){return"IsoSurfaceVolumeData"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"children"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._gradients.addInterest("set_gradients__",this),this._renderStyle.addInterest("set_renderStyle__",this),this._contourStepSize.addInterest("updateShader",this),this._surfaceValues.addInterest("updateShader",this),this._surfaceTolerance.addInterest("updateShader",this),this._renderStyle.addInterest("updateShader",this),this.getAppearance()._texture=this._voxels,this.set_gradients__(),this.set_renderStyle__(),this.set_voxels__(),this.updateShader())},set_gradients__:function(){this.gradientsNode=a(s.X3DTexture3DNode,this._gradients)},set_renderStyle__:function(){const e=this.renderStyleNodes;for(const t of e)t.removeInterest("updateShader",this),t.removeVolumeData(this);e.length=0;for(const t of this._renderStyle){const n=a(s.X3DComposableVolumeRenderStyleNode,t);n&&e.push(n)}for(const t of e)t.addInterest("updateShader",this),t.addVolumeData(this)},set_voxels__:function(){this.voxelsNode=a(s.X3DTexture3DNode,this._voxels),this.voxelsNode?this.getAppearance()._texture=this._voxels:this.getAppearance()._texture=this.getBrowser().getDefaultVoxels(this.getExecutionContext())},createShader:function(t,n,o){const a=this.getBrowser().getDefaultVolumeStyle();let l=a.getUniformsText(),d=a.getFunctionsText();l+="\n",l+="uniform float surfaceValues ["+this._surfaceValues.length+"];\n",l+="uniform float surfaceTolerance;\n";for(const e of this.renderStyleNodes)l+=e.getUniformsText();if(d+="\n",d+="   // IsoSurfaceVolumeData\n",d+="\n",this.gradientsNode?(l+="\n",l+="uniform sampler3D gradients;\n",d+="   if (length (texture (gradients, texCoord) .xyz * 2.0 - 1.0) < surfaceTolerance)\n",d+="      discard;\n"):(l+="\n",l+="vec4\n",l+="getNormal (in vec3 texCoord)\n",l+="{\n",l+="   vec4  offset = vec4 (1.0 / vec3 (textureSize (x3d_Texture3D [0], 0)), 0.0);\n",l+="   float i0     = texture (x3d_Texture3D [0], texCoord + offset .xww) .r;\n",l+="   float i1     = texture (x3d_Texture3D [0], texCoord - offset .xww) .r;\n",l+="   float i2     = texture (x3d_Texture3D [0], texCoord + offset .wyw) .r;\n",l+="   float i3     = texture (x3d_Texture3D [0], texCoord - offset .wyw) .r;\n",l+="   float i4     = texture (x3d_Texture3D [0], texCoord + offset .wwz) .r;\n",l+="   float i5     = texture (x3d_Texture3D [0], texCoord - offset .wwz) .r;\n",l+="   vec3  n      = vec3 (i1 - i0, i3 - i2, i5 - i4);\n",l+="\n",l+="   return vec4 (normalize (x3d_TextureNormalMatrix * n), length (n));\n",l+="}\n",d+="   if (getNormal (texCoord) .w < surfaceTolerance)\n",d+="      discard;\n"),d+="\n",d+="   float intensity = textureColor .r;\n",d+="\n",1===this._surfaceValues.length){const e=Math.abs(this._contourStepSize.getValue());if(0===e)d+="   if (intensity > surfaceValues [0])\n",d+="   {\n",d+="      textureColor = vec4 (vec3 (surfaceValues [0]), 1.0);\n",this.renderStyleNodes.length&&(d+=this.renderStyleNodes[0].getFunctionsText()),d+="   }\n",d+="   else\n",d+="   {\n",d+="      discard;\n",d+="   }\n",d+="\n";else{const t=[];for(let n=this._surfaceValues[0]-e;n>0;n-=e)t.unshift(n);t.push(this._surfaceValues[0]);for(let n=this._surfaceValues[0]+e;n<1;n+=e)t.push(n);d+="   if (false)\n",d+="   { }\n";for(let e=this._surfaceValues.length-1;e>=0;--e)d+="   else if (intensity > "+t[e]+")\n",d+="   {\n",d+="      textureColor = vec4 (vec3 ("+t[e]+"), 1.0);\n",this.renderStyleNodes.length&&(d+=this.renderStyleNodes[0].getFunctionsText()),d+="   }\n";d+="   else\n",d+="   {\n",d+="      discard;\n",d+="   }\n",d+="\n"}}else{d+="   if (false)\n",d+="   { }\n";for(let e=this._surfaceValues.length-1;e>=0;--e){if(d+="   else if (intensity > surfaceValues ["+e+"])\n",d+="   {\n",d+="      textureColor = vec4 (vec3 (surfaceValues ["+e+"]), 1.0);\n",this.renderStyleNodes.length){const t=Math.min(e,this.renderStyleNodes.length-1);d+=this.renderStyleNodes[t].getFunctionsText()}d+="   }\n"}d+="   else\n",d+="   {\n",d+="      discard;\n",d+="   }\n",d+="\n"}o=(o=o.replace(/\/\/ VOLUME_STYLES_UNIFORMS\n/,l)).replace(/\/\/ VOLUME_STYLES_FUNCTIONS\n/,d);const u=new r(this.getExecutionContext());u._url.push("data:x-shader/x-vertex,"+n),u.setPrivate(!0),u.setName("VolumeDataVertexShader"),u.setOptions(t),u.setup();const h=new r(this.getExecutionContext());h._type="FRAGMENT",h._url.push("data:x-shader/x-fragment,"+o),h.setPrivate(!0),h.setName("VolumeDataFragmentShader"),h.setOptions(t),h.setup();const c=new i(this.getExecutionContext());c._language="GLSL",c._parts.push(u),c._parts.push(h),c.setPrivate(!0),c.setName("VolumeDataShader"),c.addUserDefinedField(s.inputOutput,"surfaceValues",this._surfaceValues.copy()),c.addUserDefinedField(s.inputOutput,"surfaceTolerance",this._surfaceTolerance.copy()),this.gradientsNode&&c.addUserDefinedField(s.inputOutput,"gradients",new e.SFNode(this.gradientsNode)),a.addShaderFields(c);for(const e of this.renderStyleNodes)e.addShaderFields(c);const f=[];return this.addShaderUniformNames(f),c.setUniformNames(f),c.setup(),c}}),l})),t("x_ite/Components/VolumeRendering/ProjectionVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DVolumeRenderStyleNode","x_ite/Base/X3DConstants"],(function(e,t,n,o,i){"use strict";function r(e){o.call(this,e),this.addType(i.ProjectionVolumeStyle)}return r.prototype=Object.assign(Object.create(o.prototype),{constructor:r,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"type",new e.SFString("MAX")),new t(i.inputOutput,"intensityThreshold",new e.SFFloat(0))]),getTypeName:function(){return"ProjectionVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},addShaderFields:function(e){this._enabled.getValue()&&e.addUserDefinedField(i.inputOutput,"intensityThreshold_"+this.getId(),this._intensityThreshold.copy())},getUniformsText:function(){if(!this._enabled.getValue())return"";let e="";switch(e+="\n",e+="// ProjectionVolumeStyle\n",e+="\n",e+="uniform float intensityThreshold_"+this.getId()+";\n",e+="\n",e+="vec4\n",e+="getProjectionStyle_"+this.getId()+"(in vec4 originalColor, in vec3 texCoord)\n",e+="{\n",this._type.getValue()){default:case"MAX":case"AVERAGE":e+="   float projectionColor = 0.0;\n";break;case"MIN":e+="   float projectionColor = 1.0;\n"}switch(e+="   const int samples     = 32;\n",e+="   vec3  step            = normalize (x3d_TextureNormalMatrix * vec3 (0.0, 0.0, 1.0)) / float (samples);\n",e+="   vec3  ray             = texCoord - step * float (samples) * 0.5;\n",e+="   bool  first           = false;\n",e+="\n",e+="   for (int i = 0; i < samples; ++ i, ray += step)\n",e+="   {\n",e+="      if (ray .s < 0.0 || ray .s > 1.0)\n",e+="         continue;\n",e+="\n",e+="      if (ray .t < 0.0 || ray .t > 1.0)\n",e+="         continue;\n",e+="\n",e+="      if (ray .p < 0.0 || ray .p > 1.0)\n",e+="         continue;\n",e+="\n",e+="      float intensity = texture (x3d_Texture3D [0], ray) .r;\n",e+="\n",this._type.getValue()){default:case"MAX":e+="      if (intensity < intensityThreshold_"+this.getId()+")\n",e+="         continue;\n",e+="\n",e+="      if (intensityThreshold_"+this.getId()+" > 0.0 && first)\n",e+="         break;\n",e+="\n",e+="      if (intensity <= projectionColor)\n",e+="      {\n",e+="         first = true;\n",e+="         continue;\n",e+="      }\n",e+="\n",e+="      projectionColor = intensity;\n";break;case"MIN":e+="      if (intensity < intensityThreshold_"+this.getId()+")\n",e+="         continue;\n",e+="\n",e+="      if (intensityThreshold_"+this.getId()+" > 0.0 && first)\n",e+="         break;\n",e+="\n",e+="      if (intensity >= projectionColor)\n",e+="      {\n",e+="         first = true;\n",e+="         continue;\n",e+="      }\n",e+="\n",e+="      projectionColor = intensity;\n";break;case"AVERAGE":e+="      projectionColor += intensity;\n"}return e+="   }\n",e+="\n","AVERAGE"===this._type.getValue()&&(e+="   projectionColor /= float (samples);\n"),e+="   return vec4 (vec3 (projectionColor), originalColor .a);\n",e+="}\n",e},getFunctionsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="   // ProjectionVolumeStyle\n",e+="\n",e+="   textureColor = getProjectionStyle_"+this.getId()+" (textureColor, texCoord);\n",e}}),r})),t("x_ite/Components/VolumeRendering/SegmentedVolumeData",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DVolumeDataNode","x_ite/Components/Shaders/ComposedShader","x_ite/Components/Shaders/ShaderPart","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r,s,a){"use strict";function l(e){o.call(this,e),this.addType(s.SegmentedVolumeData),this.segmentIdentifiersNode=null,this.renderStyleNodes=[]}return l.prototype=Object.assign(Object.create(o.prototype),{constructor:l,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(s.inputOutput,"metadata",new e.SFNode),new t(s.inputOutput,"dimensions",new e.SFVec3f(1,1,1)),new t(s.inputOutput,"segmentEnabled",new e.MFBool),new t(s.inputOutput,"visible",new e.SFBool(!0)),new t(s.inputOutput,"bboxDisplay",new e.SFBool),new t(s.initializeOnly,"bboxCenter",new e.SFVec3f(0,0,0)),new t(s.initializeOnly,"bboxSize",new e.SFVec3f(-1,-1,-1)),new t(s.inputOutput,"segmentIdentifiers",new e.SFNode),new t(s.inputOutput,"renderStyle",new e.MFNode),new t(s.inputOutput,"voxels",new e.SFNode)]),getTypeName:function(){return"SegmentedVolumeData"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"children"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._segmentIdentifiers.addInterest("set_segmentIdentifiers__",this),this._renderStyle.addInterest("set_renderStyle__",this),this._segmentEnabled.addInterest("updateShader",this),this._segmentIdentifiers.addInterest("updateShader",this),this._renderStyle.addInterest("updateShader",this),this.getAppearance()._texture=this._voxels,this.set_segmentIdentifiers__(),this.set_renderStyle__(),this.set_voxels__(),this.updateShader())},getSegmentEnabled:function(e){return!(e<this._segmentEnabled.length)||this._segmentEnabled[e]},set_segmentIdentifiers__:function(){this.segmentIdentifiersNode=a(s.X3DTexture3DNode,this._segmentIdentifiers)},set_renderStyle__:function(){const e=this.renderStyleNodes;for(const t of e)t.removeInterest("updateShader",this),t.removeVolumeData(this);e.length=0;for(const t of this._renderStyle){const n=a(s.X3DComposableVolumeRenderStyleNode,t);n&&e.push(n)}for(const t of e)t.addInterest("updateShader",this),t.addVolumeData(this)},set_voxels__:function(){this.voxelsNode=a(s.X3DTexture3DNode,this._voxels),this.voxelsNode?this.getAppearance()._texture=this._voxels:this.getAppearance()._texture=this.getBrowser().getDefaultVoxels(this.getExecutionContext())},createShader:function(t,n,o){const a=this.getBrowser().getDefaultVolumeStyle();let l=a.getUniformsText(),d=a.getFunctionsText();if(this.segmentIdentifiersNode?(l+="\n",l+="uniform sampler3D segmentIdentifiers;\n",l+="\n",d+="\n",d+="   int segment = int (texture (segmentIdentifiers, texCoord) .r * 255.0);\n"):d+="   int segment = 0;\n",this.renderStyleNodes.length){d+="\n",d+="   switch (segment)\n",d+="   {\n";for(const[e,t]of this.renderStyleNodes.entries())d+="      case "+e+":\n",d+="      {\n",this.getSegmentEnabled(e)?(l+=t.getUniformsText(),d+=t.getFunctionsText(),d+="         break;\n"):d+="         discard;\n",d+="      }\n";d+="   }\n"}o=(o=o.replace(/\/\/ VOLUME_STYLES_UNIFORMS\n/,l)).replace(/\/\/ VOLUME_STYLES_FUNCTIONS\n/,d);const u=new r(this.getExecutionContext());u._url.push("data:x-shader/x-vertex,"+n),u.setPrivate(!0),u.setName("SegmentedVolumeDataVertexShader"),u.setOptions(t),u.setup();const h=new r(this.getExecutionContext());h._type="FRAGMENT",h._url.push("data:x-shader/x-fragment,"+o),h.setPrivate(!0),h.setName("SegmentedVolumeDataFragmentShader"),h.setOptions(t),h.setup();const c=new i(this.getExecutionContext());c._language="GLSL",c._parts.push(u),c._parts.push(h),c.setPrivate(!0),c.setName("SegmentedVolumeDataShader"),this.segmentIdentifiersNode&&c.addUserDefinedField(s.inputOutput,"segmentIdentifiers",new e.SFNode(this.segmentIdentifiersNode)),a.addShaderFields(c);for(const[e,t]of this.renderStyleNodes.entries())this.getSegmentEnabled(e)&&t.addShaderFields(c);const f=[];return this.addShaderUniformNames(f),c.setUniformNames(f),c.setup(),c}}),l})),t("x_ite/Components/VolumeRendering/ShadedVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r){"use strict";function s(e){o.call(this,e),this.addType(i.ShadedVolumeStyle)}return s.prototype=Object.assign(Object.create(o.prototype),{constructor:s,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"lighting",new e.SFBool),new t(i.inputOutput,"shadows",new e.SFBool),new t(i.initializeOnly,"phaseFunction",new e.SFString("Henyey-Greenstein")),new t(i.inputOutput,"material",new e.SFNode),new t(i.inputOutput,"surfaceNormals",new e.SFNode)]),getTypeName:function(){return"ShadedVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._material.addInterest("set_material__",this),this._surfaceNormals.addInterest("set_surfaceNormals__",this),this.set_material__(),this.set_surfaceNormals__())},set_material__:function(){this.materialNode&&this.materialNode.removeInterest("addNodeEvent",this),this.materialNode=r(i.X3DMaterialNode,this._material),this.materialNode&&this.materialNode.addInterest("addNodeEvent",this)},set_surfaceNormals__:function(){this.surfaceNormalsNode=r(i.X3DTexture3DNode,this._surfaceNormals)},addShaderFields:function(t){this._enabled.getValue()&&(this.materialNode&&(t.addUserDefinedField(i.inputOutput,"ambientIntensity_"+this.getId(),this.materialNode._ambientIntensity.copy()),t.addUserDefinedField(i.inputOutput,"diffuseColor_"+this.getId(),this.materialNode._diffuseColor.copy()),t.addUserDefinedField(i.inputOutput,"specularColor_"+this.getId(),this.materialNode._specularColor.copy()),t.addUserDefinedField(i.inputOutput,"emissiveColor_"+this.getId(),this.materialNode._emissiveColor.copy()),t.addUserDefinedField(i.inputOutput,"shininess_"+this.getId(),this.materialNode._shininess.copy()),t.addUserDefinedField(i.inputOutput,"transparency_"+this.getId(),this.materialNode._transparency.copy())),this.surfaceNormalsNode&&t.addUserDefinedField(i.inputOutput,"surfaceNormals_"+this.getId(),new e.SFNode(this.surfaceNormalsNode)))},getUniformsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="// ShadedVolumeStyle\n",e+="\n",e+="uniform float ambientIntensity_"+this.getId()+";\n",e+="uniform vec3  diffuseColor_"+this.getId()+";\n",e+="uniform vec3  specularColor_"+this.getId()+";\n",e+="uniform vec3  emissiveColor_"+this.getId()+";\n",e+="uniform float shininess_"+this.getId()+";\n",e+="uniform float transparency_"+this.getId()+";\n",e+=this.getNormalText(this.surfaceNormalsNode),e+="\n",e+="float\n",e+="getSpotFactor_"+this.getId()+" (const in float cutOffAngle, const in float beamWidth, const in vec3 L, const in vec3 d)\n",e+="{\n",e+="   float spotAngle = acos (clamp (dot (-L, d), -1.0, 1.0));\n",e+="\n",e+="   if (spotAngle >= cutOffAngle)\n",e+="      return 0.0;\n",e+="   else if (spotAngle <= beamWidth)\n",e+="      return 1.0;\n",e+="\n",e+="   return (spotAngle - cutOffAngle) / (beamWidth - cutOffAngle);\n",e+="}\n",e+="\n",e+="vec4\n",e+="getShadedStyle_"+this.getId()+" (in vec4 originalColor, in vec3 texCoord)\n",e+="{\n",e+="   vec4 surfaceNormal = getNormal_"+this.getId()+" (texCoord);\n",e+="\n",e+="   if (surfaceNormal .w == 0.0)\n",e+="      return vec4 (0.0);\n",e+="\n",e+="   vec4 shadedColor   = vec4 (0.0);\n",this._lighting.getValue()?(this.materialNode?(e+="   vec3 diffuseFactor = diffuseColor_"+this.getId()+";\n",e+="   vec3 ambientTerm   = diffuseFactor * ambientIntensity_"+this.getId()+";\n",e+="\n",e+="   shadedColor .a = originalColor .a * (1.0 - transparency_"+this.getId()+");\n"):(e+="   vec3 diffuseFactor = originalColor .rgb;\n",e+="   vec3 ambientTerm   = vec3 (0.0);\n",e+="\n",e+="   shadedColor .a = originalColor .a;\n"),e+="\n",e+="   vec3 N = surfaceNormal .xyz;\n",e+="   vec3 V = normalize (-vertex); // normalized vector from point on geometry to viewer's position\n",e+="\n",e+="   for (int i = 0; i < X3D_NUM_LIGHTS; ++ i)\n",e+="   {\n",e+="      x3d_LightSourceParameters light = x3d_LightSource [i];\n",e+="\n",e+="      vec3  vL = light .location - vertex; // Light to fragment\n",e+="      float dL = length (light .matrix * vL);\n",e+="      bool  di = light .type == x3d_DirectionalLight;\n",e+="\n",e+="      if (di || dL <= light .radius)\n",e+="      {\n",e+="         vec3 d = light .direction;\n",e+="         vec3 c = light .attenuation;\n",e+="         vec3 L = di ? -d : normalize (vL);      // Normalized vector from point on geometry to light source i position.\n",e+="         vec3 H = normalize (L + V);             // Specular term\n",e+="\n",e+="         float lightAngle     = max (dot (N, L), 0.0);      // Angle between normal and light ray.\n",e+="         vec3  diffuseTerm    = diffuseFactor * lightAngle;\n",e+="         float specularFactor = shininess_"+this.getId()+" > 0.0 ? pow (max (dot (N, H), 0.0), shininess_"+this.getId()+" * 128.0) : 1.0;\n",e+="         vec3  specularTerm   = light .intensity * specularColor_"+this.getId()+" * specularFactor;\n",e+="\n",e+="         float attenuationFactor     = di ? 1.0 : 1.0 / max (dot (c, vec3 (1.0, dL, dL * dL)), 1.0);\n",e+="         float spotFactor            = light .type == x3d_SpotLight ? getSpotFactor_"+this.getId()+" (light .cutOffAngle, light .beamWidth, L, d) : 1.0;\n",e+="         float attenuationSpotFactor = attenuationFactor * spotFactor;\n",e+="         vec3  ambientColor          = light .ambientIntensity * ambientTerm;\n",e+="         vec3  diffuseSpecularColor  = light .intensity * (diffuseTerm + specularTerm);\n",e+="\n",e+="         shadedColor .rgb += attenuationSpotFactor * light .color * (ambientColor + diffuseSpecularColor);\n",e+="      }\n",e+="\n",e+="      shadedColor .rgb += emissiveColor_"+this.getId()+";\n",e+="   }\n"):this.materialNode?(e+="   shadedColor .rgb = diffuseColor_"+this.getId()+";\n",e+="   shadedColor .a   = originalColor .a * (1.0 - transparency_"+this.getId()+");\n"):e+="   shadedColor = originalColor;\n",e+="\n",e+="   return shadedColor;\n",e+="}\n",e},getFunctionsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="   // ShadedVolumeStyle\n",e+="\n",e+="   textureColor = getShadedStyle_"+this.getId()+" (textureColor, texCoord);\n",e}}),s})),t("x_ite/Components/VolumeRendering/SilhouetteEnhancementVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r){"use strict";function s(e){o.call(this,e),this.addType(i.SilhouetteEnhancementVolumeStyle)}return s.prototype=Object.assign(Object.create(o.prototype),{constructor:s,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"silhouetteRetainedOpacity",new e.SFFloat(1)),new t(i.inputOutput,"silhouetteBoundaryOpacity",new e.SFFloat(0)),new t(i.inputOutput,"silhouetteSharpness",new e.SFFloat(.5)),new t(i.inputOutput,"surfaceNormals",new e.SFNode)]),getTypeName:function(){return"SilhouetteEnhancementVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._surfaceNormals.addInterest("set_surfaceNormals__",this),this.set_surfaceNormals__())},set_surfaceNormals__:function(){this.surfaceNormalsNode=r(i.X3DTexture3DNode,this._surfaceNormals)},addShaderFields:function(t){this._enabled.getValue()&&(t.addUserDefinedField(i.inputOutput,"silhouetteRetainedOpacity_"+this.getId(),this._silhouetteRetainedOpacity.copy()),t.addUserDefinedField(i.inputOutput,"silhouetteBoundaryOpacity_"+this.getId(),this._silhouetteBoundaryOpacity.copy()),t.addUserDefinedField(i.inputOutput,"silhouetteSharpness_"+this.getId(),this._silhouetteSharpness.copy()),this.surfaceNormalsNode&&t.addUserDefinedField(i.inputOutput,"surfaceNormals_"+this.getId(),new e.SFNode(this.surfaceNormalsNode)))},getUniformsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="// SilhouetteEnhancementVolumeStyle\n",e+="\n",e+="uniform float silhouetteRetainedOpacity_"+this.getId()+";\n",e+="uniform float silhouetteBoundaryOpacity_"+this.getId()+";\n",e+="uniform float silhouetteSharpness_"+this.getId()+";\n",e+=this.getNormalText(this.surfaceNormalsNode),e+="\n",e+="vec4\n",e+="getSilhouetteEnhancementStyle_"+this.getId()+" (in vec4 originalColor, in vec3 texCoord)\n",e+="{\n",e+="   vec4 surfaceNormal = getNormal_"+this.getId()+" (texCoord);\n",e+="\n",e+="   if (surfaceNormal .w == 0.0)\n",e+="      return vec4 (0.0);\n",e+="   \n",e+="   float silhouetteRetainedOpacity = silhouetteRetainedOpacity_"+this.getId()+";\n",e+="   float silhouetteBoundaryOpacity = silhouetteBoundaryOpacity_"+this.getId()+";\n",e+="   float silhouetteSharpness       = silhouetteSharpness_"+this.getId()+";\n",e+="\n",e+="   return vec4 (originalColor .rgb, originalColor .a * (silhouetteRetainedOpacity + silhouetteBoundaryOpacity * pow (1.0 - abs (dot (surfaceNormal .xyz, normalize (vertex))), silhouetteSharpness)));\n",e+="}\n",e},getFunctionsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="   // SilhouetteEnhancementVolumeStyle\n",e+="\n",e+="   textureColor = getSilhouetteEnhancementStyle_"+this.getId()+" (textureColor, texCoord);\n",e}}),s})),t("x_ite/Components/VolumeRendering/ToneMappedVolumeStyle",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r){"use strict";function s(e){o.call(this,e),this.addType(i.ToneMappedVolumeStyle)}return s.prototype=Object.assign(Object.create(o.prototype),{constructor:s,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(i.inputOutput,"metadata",new e.SFNode),new t(i.inputOutput,"enabled",new e.SFBool(!0)),new t(i.inputOutput,"coolColor",new e.SFColorRGBA(0,0,1,0)),new t(i.inputOutput,"warmColor",new e.SFColorRGBA(1,1,0,0)),new t(i.inputOutput,"surfaceNormals",new e.SFNode)]),getTypeName:function(){return"ToneMappedVolumeStyle"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"renderStyle"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._surfaceNormals.addInterest("set_surfaceNormals__",this),this.set_surfaceNormals__())},set_surfaceNormals__:function(){this.surfaceNormalsNode=r(i.X3DTexture3DNode,this._surfaceNormals)},addShaderFields:function(t){this._enabled.getValue()&&(t.addUserDefinedField(i.inputOutput,"coolColor_"+this.getId(),this._coolColor.copy()),t.addUserDefinedField(i.inputOutput,"warmColor_"+this.getId(),this._warmColor.copy()),this.surfaceNormalsNode&&t.addUserDefinedField(i.inputOutput,"surfaceNormals_"+this.getId(),new e.SFNode(this.surfaceNormalsNode)))},getUniformsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="// ToneMappedVolumeStyle\n",e+="\n",e+="uniform vec4 coolColor_"+this.getId()+";\n",e+="uniform vec4 warmColor_"+this.getId()+";\n",e+=this.getNormalText(this.surfaceNormalsNode),e+="\n",e+="vec4\n",e+="getToneMappedStyle_"+this.getId()+" (in vec4 originalColor, in vec3 texCoord)\n",e+="{\n",e+="   vec4 surfaceNormal = getNormal_"+this.getId()+" (texCoord);\n",e+="\n",e+="   if (surfaceNormal .w == 0.0)\n",e+="      return vec4 (0.0);\n",e+="\n",e+="   vec3 toneColor = vec3 (0.0);\n",e+="   vec3 coolColor = coolColor_"+this.getId()+" .rgb;\n",e+="   vec3 warmColor = warmColor_"+this.getId()+" .rgb;\n",e+="\n",e+="   for (int i = 0; i < X3D_NUM_LIGHTS; ++ i)\n",e+="   {\n",e+="      x3d_LightSourceParameters light = x3d_LightSource [i];\n",e+="\n",e+="      vec3  L           = light .type == x3d_DirectionalLight ? -light .direction : normalize (light .location - vertex);\n",e+="      float colorFactor = dot (L, surfaceNormal .xyz) * 0.5 + 0.5;\n",e+="\n",e+="      toneColor += mix (warmColor .rgb, coolColor .rgb, colorFactor);\n",e+="   }\n",e+="\n",e+="   return vec4 (toneColor, originalColor .a);\n",e+="}\n",e},getFunctionsText:function(){if(!this._enabled.getValue())return"";let e="";return e+="\n",e+="   // ToneMappedVolumeStyle\n",e+="\n",e+="   textureColor = getToneMappedStyle_"+this.getId()+" (textureColor, texCoord);\n",e}}),s})),t("x_ite/Components/VolumeRendering/VolumeData",["x_ite/Fields","x_ite/Base/X3DFieldDefinition","x_ite/Base/FieldDefinitionArray","x_ite/Components/VolumeRendering/X3DVolumeDataNode","x_ite/Components/Shaders/ComposedShader","x_ite/Components/Shaders/ShaderPart","x_ite/Base/X3DConstants","x_ite/Base/X3DCast"],(function(e,t,n,o,i,r,s,a){"use strict";function l(e){o.call(this,e),this.addType(s.VolumeData),this.renderStyleNode=null}return l.prototype=Object.assign(Object.create(o.prototype),{constructor:l,[Symbol.for("X_ITE.X3DBaseNode.fieldDefinitions")]:new n([new t(s.inputOutput,"metadata",new e.SFNode),new t(s.inputOutput,"dimensions",new e.SFVec3f(1,1,1)),new t(s.inputOutput,"visible",new e.SFBool(!0)),new t(s.inputOutput,"bboxDisplay",new e.SFBool),new t(s.initializeOnly,"bboxCenter",new e.SFVec3f(0,0,0)),new t(s.initializeOnly,"bboxSize",new e.SFVec3f(-1,-1,-1)),new t(s.inputOutput,"renderStyle",new e.SFNode),new t(s.inputOutput,"voxels",new e.SFNode)]),getTypeName:function(){return"VolumeData"},getComponentName:function(){return"VolumeRendering"},getContainerField:function(){return"children"},initialize:function(){o.prototype.initialize.call(this);this.getBrowser().getContext().getVersion()<2||(this._renderStyle.addInterest("set_renderStyle__",this),this._voxels.addInterest("set_voxels__",this),this._renderStyle.addInterest("updateShader",this),this.getAppearance()._texture=this._voxels,this.set_renderStyle__(),this.set_voxels__(),this.updateShader())},set_renderStyle__:function(){this.renderStyleNode&&(this.renderStyleNode.removeInterest("updateShader",this),this.renderStyleNode.removeVolumeData(this)),this.renderStyleNode=a(s.X3DVolumeRenderStyleNode,this._renderStyle),this.renderStyleNode&&(this.renderStyleNode.addInterest("updateShader",this),this.renderStyleNode.addVolumeData(this))},set_voxels__:function(){this.voxelsNode=a(s.X3DTexture3DNode,this._voxels),this.voxelsNode?this.getAppearance()._texture=this._voxels:this.getAppearance()._texture=this.getBrowser().getDefaultVoxels(this.getExecutionContext())},createShader:function(e,t,n){const o=this.getBrowser().getDefaultVolumeStyle();let s=o.getUniformsText(),a=o.getFunctionsText();this.renderStyleNode&&(s+=this.renderStyleNode.getUniformsText(),a+=this.renderStyleNode.getFunctionsText()),n=(n=n.replace(/\/\/ VOLUME_STYLES_UNIFORMS\n/,s)).replace(/\/\/ VOLUME_STYLES_FUNCTIONS\n/,a);const l=new r(this.getExecutionContext());l._url.push("data:x-shader/x-vertex,"+t),l.setPrivate(!0),l.setName("VolumeDataVertexShader"),l.setOptions(e),l.setup();const d=new r(this.getExecutionContext());d._type="FRAGMENT",d._url.push("data:x-shader/x-fragment,"+n),d.setPrivate(!0),d.setName("VolumeDataFragmentShader"),d.setOptions(e),d.setup();const u=new i(this.getExecutionContext());u._language="GLSL",u._parts.push(l),u._parts.push(d),u.setPrivate(!0),u.setName("VolumeDataShader"),o.addShaderFields(u),this.renderStyleNode&&this.renderStyleNode.addShaderFields(u);const h=[];return this.addShaderUniformNames(h),u.setUniformNames(h),u.setup(),u}}),l})),t(n.getComponentUrl("volume-rendering"),["x_ite/Components","x_ite/Browser/VolumeRendering/X3DVolumeRenderingContext","x_ite/Components/VolumeRendering/BlendedVolumeStyle","x_ite/Components/VolumeRendering/BoundaryEnhancementVolumeStyle","x_ite/Components/VolumeRendering/CartoonVolumeStyle","x_ite/Components/VolumeRendering/ComposedVolumeStyle","x_ite/Components/VolumeRendering/EdgeEnhancementVolumeStyle","x_ite/Components/VolumeRendering/IsoSurfaceVolumeData","x_ite/Components/VolumeRendering/OpacityMapVolumeStyle","x_ite/Components/VolumeRendering/ProjectionVolumeStyle","x_ite/Components/VolumeRendering/SegmentedVolumeData","x_ite/Components/VolumeRendering/ShadedVolumeStyle","x_ite/Components/VolumeRendering/SilhouetteEnhancementVolumeStyle","x_ite/Components/VolumeRendering/ToneMappedVolumeStyle","x_ite/Components/VolumeRendering/VolumeData","x_ite/Components/VolumeRendering/X3DComposableVolumeRenderStyleNode","x_ite/Components/VolumeRendering/X3DVolumeDataNode","x_ite/Components/VolumeRendering/X3DVolumeRenderStyleNode",n.getComponentUrl("cad-geometry"),n.getComponentUrl("texturing-3d")],(function(e,t,n,o,i,r,s,a,l,d,u,h,c,f,m,p,g,_){"use strict";e.addComponent({name:"VolumeRendering",types:{BlendedVolumeStyle:n,BoundaryEnhancementVolumeStyle:o,CartoonVolumeStyle:i,ComposedVolumeStyle:r,EdgeEnhancementVolumeStyle:s,IsoSurfaceVolumeData:a,OpacityMapVolumeStyle:l,ProjectionVolumeStyle:d,SegmentedVolumeData:u,ShadedVolumeStyle:h,SilhouetteEnhancementVolumeStyle:c,ToneMappedVolumeStyle:f,VolumeData:m},abstractTypes:{X3DComposableVolumeRenderStyleNode:p,X3DVolumeDataNode:g,X3DVolumeRenderStyleNode:_},browserContext:t})}))}();
