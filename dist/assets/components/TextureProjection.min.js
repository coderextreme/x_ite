/* X_ITE v9.0.0 */(()=>{"use strict";var t={n:e=>{var i=e&&e.__esModule?()=>e.default:()=>e;return t.d(i,{a:i}),i},d:(e,i)=>{for(var n in i)t.o(i,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:i[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};const e=window[Symbol.for("X_ITE.X3D-9.0.0")].require("x_ite/Components");var i=t.n(e);const n=window[Symbol.for("X_ITE.X3D-9.0.0")].require("x_ite/Fields");var r=t.n(n);const o=window[Symbol.for("X_ITE.X3D-9.0.0")].require("x_ite/Base/X3DFieldDefinition");var a=t.n(o);const s=window[Symbol.for("X_ITE.X3D-9.0.0")].require("x_ite/Base/FieldDefinitionArray");var u=t.n(s);const l=window[Symbol.for("X_ITE.X3D-9.0.0")].require("x_ite/Components/Lighting/X3DLightNode");var h=t.n(l);const c=window[Symbol.for("X_ITE.X3D-9.0.0")].require("x_ite/Base/X3DConstants");var x=t.n(c);const w=window[Symbol.for("X_ITE.X3D-9.0.0")].require("x_ite/Base/X3DCast");var p=t.n(w);const d=window[Symbol.for("X_ITE.X3D-9.0.0")].require("standard/Math/Numbers/Vector3");var m=t.n(d);const g=window[Symbol.for("X_ITE.X3D-9.0.0")].require("standard/Math/Numbers/Rotation4");var f=t.n(g);const _=window[Symbol.for("X_ITE.X3D-9.0.0")].require("standard/Math/Numbers/Matrix4");var T=t.n(_);const b=window[Symbol.for("X_ITE.X3D-9.0.0")].require("x_ite/Namespace");var S=t.n(b);function M(t){h().call(this,t),this.addType(x().X3DTextureProjectorNode),this._location.setUnit("length"),this._farDistance.setUnit("length"),this._location.setUnit("length")}Object.assign(Object.setPrototypeOf(M.prototype,h().prototype),{initialize(){h().prototype.initialize.call(this),this._texture.addInterest("set_texture__",this),this.set_texture__()},getLightKey:()=>3,getGlobal(){return this._global.getValue()},getLocation(){return this._location.getValue()},getDirection(){return this._direction.getValue()},getNearDistance(){const t=this._nearDistance.getValue();return-1===t?.125:t},getFarDistance(){const t=this._farDistance.getValue();return-1===t?1e5:t},getTexture(){return this.textureNode},getBiasMatrix:(()=>{const t=new(T())(.5,0,0,0,0,.5,0,0,0,0,.5,0,.5,.5,.5,1);return function(){return t}})(),straightenHorizon:(()=>{const t=new(m())(0,0,0),e=new(m())(0,0,0),i=new(m())(0,0,0),n=new(f());return function(r){r.multVecRot(t.assign(m().xAxis).negate()),r.multVecRot(e.assign(m().zAxis)),i.assign(this._upVector.getValue()).normalize();const o=e.cross(i);return Math.abs(e.dot(i))>=1||Math.abs(o.dot(t))>=1?r:(n.setFromToVec(t,o),r.multRight(n))}})(),set_texture__(){this.textureNode?.removeInterest("set_aspectRatio__",this),this.textureNode=p()(x().X3DTexture2DNode,this._texture),this.textureNode?.addInterest("set_aspectRatio__",this),this.setEnabled(!!this.textureNode),this.set_aspectRatio__(),this.set_on__()},set_aspectRatio__(){this.textureNode?this._aspectRatio=this.textureNode.getWidth()/this.textureNode.getHeight():this._aspectRatio=1}}),Object.defineProperties(M,{typeName:{value:"X3DTextureProjectorNode",enumerable:!0},componentName:{value:"TextureProjection",enumerable:!0}});const O=M;S().add("X3DTextureProjectorNode","x_ite/Components/TextureProjection/X3DTextureProjectorNode",O);const F=O,y=window[Symbol.for("X_ITE.X3D-9.0.0")].require("standard/Math/Geometry/Camera");var j=t.n(y);const X=window[Symbol.for("X_ITE.X3D-9.0.0")].require("standard/Math/Utility/MatrixStack");var v=t.n(X);const V=window[Symbol.for("X_ITE.X3D-9.0.0")].require("standard/Utility/ObjectCache");var D=t.n(V);const P=D()(N);function N(){this.projectionMatrix=new(T()),this.modelViewMatrix=new(v())(T()),this.modelMatrix=new(T()),this.invTextureSpaceMatrix=new(T()),this.invTextureSpaceProjectionMatrix=new(T()),this.location=new(m())(0,0,0),this.locationArray=new Float32Array(3),this.direction=new(m())(0,0,0),this.rotation=new(f()),this.matrix=new(T()),this.matrixArray=new Float32Array(16),this.textureMatrix=new(T())}function I(t){F.call(this,t),this.addType(x().TextureProjector),this._fieldOfView.setUnit("angle")}Object.assign(N.prototype,{set(t,e,i){this.browser=t.getBrowser(),this.lightNode=t,this.global=t.getGlobal(),this.modelViewMatrix.pushMatrix(i),this.textureMatrix.set(...t.getTexture().getMatrix())},renderShadowMap(t){},setGlobalVariables(t){const e=this.lightNode,i=t.getCameraSpaceMatrix().get(),n=this.modelMatrix.assign(this.modelViewMatrix.get()).multRight(i),r=this.invTextureSpaceMatrix.assign(this.global?n:T().Identity);this.rotation.setFromToVec(m().zAxis,this.direction.assign(e.getDirection()).negate()),e.straightenHorizon(this.rotation),r.translate(e.getLocation()),r.rotate(this.rotation),r.inverse();const o=e.getTexture().getWidth(),a=e.getTexture().getHeight(),s=e.getNearDistance(),u=e.getFarDistance(),l=e.getFieldOfView();j().perspective(l,s,u,o,a,this.projectionMatrix),this.global||r.multLeft(n.inverse()),this.invTextureSpaceProjectionMatrix.assign(r).multRight(this.projectionMatrix).multRight(e.getBiasMatrix()),this.matrix.assign(i).multRight(this.invTextureSpaceProjectionMatrix).multRight(this.textureMatrix),this.matrixArray.set(this.matrix),this.modelViewMatrix.get().multVecMatrix(this.location.assign(e._location.getValue())),this.locationArray.set(this.location)},setShaderUniforms(t,e,i){const n=e.numTextureProjectors++,r=this.lightNode.getTexture(),o=this.global?this.textureUnit=this.textureUnit??this.browser.popTexture2DUnit():this.browser.getTexture2DUnit();t.activeTexture(t.TEXTURE0+o),t.bindTexture(t.TEXTURE_2D,r.getTexture()),t.uniform1i(e.x3d_TextureProjectorTexture[n],o),e.hasTextureProjector(n,this)||(t.uniformMatrix4fv(e.x3d_TextureProjectorMatrix[n],!1,this.matrixArray),t.uniform3fv(e.x3d_TextureProjectorLocation[n],this.locationArray))},dispose(){this.browser.pushTexture2DUnit(this.textureUnit),this.modelViewMatrix.clear(),this.textureUnit=void 0,P.push(this)}}),Object.assign(Object.setPrototypeOf(I.prototype,F.prototype),{initialize(){F.prototype.initialize.call(this)},getFieldOfView(){const t=this._fieldOfView.getValue();return t>0&&t<Math.PI?t:Math.PI/4},getLights:()=>P}),Object.defineProperties(I,{typeName:{value:"TextureProjector",enumerable:!0},componentName:{value:"TextureProjection",enumerable:!0},containerField:{value:"children",enumerable:!0},specificationRange:{value:Object.freeze(["4.0","Infinity"]),enumerable:!0},fieldDefinitions:{value:new(u())([new(a())(x().inputOutput,"metadata",new(r().SFNode)),new(a())(x().inputOutput,"description",new(r().SFString)),new(a())(x().inputOutput,"global",new(r().SFBool)(!0)),new(a())(x().inputOutput,"on",new(r().SFBool)(!0)),new(a())(x().inputOutput,"color",new(r().SFColor)(1,1,1)),new(a())(x().inputOutput,"intensity",new(r().SFFloat)(1)),new(a())(x().inputOutput,"ambientIntensity",new(r().SFFloat)),new(a())(x().inputOutput,"location",new(r().SFVec3f)(0,0,0)),new(a())(x().inputOutput,"direction",new(r().SFVec3f)(0,0,1)),new(a())(x().inputOutput,"upVector",new(r().SFVec3f)(0,0,1)),new(a())(x().inputOutput,"fieldOfView",new(r().SFFloat)(.785398)),new(a())(x().inputOutput,"nearDistance",new(r().SFFloat)(-1)),new(a())(x().inputOutput,"farDistance",new(r().SFFloat)(-1)),new(a())(x().outputOnly,"aspectRatio",new(r().SFFloat)),new(a())(x().inputOutput,"texture",new(r().SFNode)),new(a())(x().inputOutput,"shadows",new(r().SFBool)),new(a())(x().inputOutput,"shadowColor",new(r().SFColor)),new(a())(x().inputOutput,"shadowIntensity",new(r().SFFloat)(1)),new(a())(x().inputOutput,"shadowBias",new(r().SFFloat)(.005)),new(a())(x().initializeOnly,"shadowMapSize",new(r().SFInt32)(1024))]),enumerable:!0}});const R=I;S().add("TextureProjector","x_ite/Components/TextureProjection/TextureProjector",R);const z=R,U=D()(E);function E(){this.projectionMatrix=new(T()),this.modelViewMatrix=new(v())(T()),this.modelMatrix=new(T()),this.invTextureSpaceMatrix=new(T()),this.location=new(m())(0,0,0),this.locationArray=new Float32Array(3),this.invTextureSpaceProjectionMatrix=new(T()),this.direction=new(m())(0,0,0),this.rotation=new(f()),this.matrix=new(T()),this.matrixArray=new Float32Array(16),this.textureMatrix=new(T())}function A(t){F.call(this,t),this.addType(x().TextureProjectorParallel),this._fieldOfView.setUnit("length")}Object.assign(E.prototype,{set(t,e,i){this.browser=t.getBrowser(),this.lightNode=t,this.global=t.getGlobal(),this.modelViewMatrix.pushMatrix(i),this.textureMatrix.set(...t.getTexture().getMatrix())},renderShadowMap(t){},setGlobalVariables(t){const e=this.lightNode,i=t.getCameraSpaceMatrix().get(),n=this.modelMatrix.assign(this.modelViewMatrix.get()).multRight(i),r=this.invTextureSpaceMatrix.assign(this.global?n:T().Identity);this.rotation.setFromToVec(m().zAxis,this.direction.assign(e.getDirection()).negate()),e.straightenHorizon(this.rotation),r.translate(e.getLocation()),r.rotate(this.rotation),r.inverse();const o=e.getTexture().getWidth()/e.getTexture().getHeight(),a=e.getMinimumX(),s=e.getMaximumX(),u=e.getMinimumY(),l=e.getMaximumY(),h=e.getSizeX(),c=e.getSizeY(),x=e.getNearDistance(),w=e.getFarDistance();if(o>h/c){const t=(a+s)/2,e=c*o/2;j().ortho(t-e,t+e,u,l,x,w,this.projectionMatrix)}else{const t=(u+l)/2,e=h/o/2;j().ortho(a,s,t-e,t+e,x,w,this.projectionMatrix)}this.global||r.multLeft(n.inverse()),this.invTextureSpaceProjectionMatrix.assign(r).multRight(this.projectionMatrix).multRight(e.getBiasMatrix()),this.matrix.assign(i).multRight(this.invTextureSpaceProjectionMatrix).multRight(this.textureMatrix),this.matrixArray.set(this.matrix),this.modelViewMatrix.get().multVecMatrix(this.location.assign(e._location.getValue())),this.locationArray.set(this.location)},setShaderUniforms(t,e,i){const n=e.numTextureProjectors++,r=this.lightNode.getTexture(),o=this.global?this.textureUnit=this.textureUnit??this.browser.popTexture2DUnit():this.browser.getTexture2DUnit();t.activeTexture(t.TEXTURE0+o),t.bindTexture(t.TEXTURE_2D,r.getTexture()),t.uniform1i(e.x3d_TextureProjectorTexture[n],o),e.hasTextureProjector(n,this)||(t.uniformMatrix4fv(e.x3d_TextureProjectorMatrix[n],!1,this.matrixArray),t.uniform3fv(e.x3d_TextureProjectorLocation[n],this.locationArray))},dispose(){this.browser.pushTexture2DUnit(this.textureUnit),this.modelViewMatrix.clear(),this.textureUnit=void 0,U.push(this)}}),Object.assign(Object.setPrototypeOf(A.prototype,F.prototype),{initialize(){F.prototype.initialize.call(this),this._fieldOfView.addInterest("set_fieldOfView___",this),this.set_fieldOfView___()},set_fieldOfView___(){const t=this._fieldOfView.length;this.minimumX=t>0?this._fieldOfView[0]:-1,this.minimumY=t>1?this._fieldOfView[1]:-1,this.maximumX=t>2?this._fieldOfView[2]:1,this.maximumY=t>3?this._fieldOfView[3]:1,this.sizeX=this.maximumX-this.minimumX,this.sizeY=this.maximumY-this.minimumY},getMinimumX(){return this.minimumX},getMinimumY(){return this.minimumY},getMaximumX(){return this.maximumX},getMaximumY(){return this.maximumY},getSizeX(){return this.sizeX},getSizeY(){return this.sizeY},getLights:()=>U}),Object.defineProperties(A,{typeName:{value:"TextureProjectorParallel",enumerable:!0},componentName:{value:"TextureProjection",enumerable:!0},containerField:{value:"children",enumerable:!0},specificationRange:{value:Object.freeze(["4.0","Infinity"]),enumerable:!0},fieldDefinitions:{value:new(u())([new(a())(x().inputOutput,"metadata",new(r().SFNode)),new(a())(x().inputOutput,"description",new(r().SFString)),new(a())(x().inputOutput,"global",new(r().SFBool)(!0)),new(a())(x().inputOutput,"on",new(r().SFBool)(!0)),new(a())(x().inputOutput,"color",new(r().SFColor)(1,1,1)),new(a())(x().inputOutput,"intensity",new(r().SFFloat)(1)),new(a())(x().inputOutput,"ambientIntensity",new(r().SFFloat)),new(a())(x().inputOutput,"location",new(r().SFVec3f)(0,0,0)),new(a())(x().inputOutput,"direction",new(r().SFVec3f)(0,0,1)),new(a())(x().inputOutput,"upVector",new(r().SFVec3f)(0,0,1)),new(a())(x().inputOutput,"fieldOfView",new(r().MFFloat)(-1,-1,1,1)),new(a())(x().inputOutput,"nearDistance",new(r().SFFloat)(-1)),new(a())(x().inputOutput,"farDistance",new(r().SFFloat)(-1)),new(a())(x().outputOnly,"aspectRatio",new(r().SFFloat)),new(a())(x().inputOutput,"texture",new(r().SFNode)),new(a())(x().inputOutput,"shadows",new(r().SFBool)),new(a())(x().inputOutput,"shadowColor",new(r().SFColor)),new(a())(x().inputOutput,"shadowIntensity",new(r().SFFloat)(1)),new(a())(x().inputOutput,"shadowBias",new(r().SFFloat)(.005)),new(a())(x().initializeOnly,"shadowMapSize",new(r().SFInt32)(1024))]),enumerable:!0}});const B=A;S().add("TextureProjectorParallel","x_ite/Components/TextureProjection/TextureProjectorParallel",B);const C=B;i().add({name:"TextureProjection",concreteNodes:[z,C],abstractNodes:[F]});const q=void 0;S().add("TextureProjection","assets/components/TextureProjection",q)})();